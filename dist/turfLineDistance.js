!function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).turfLineDistance=e()}(function(){return function o(n,i,a){function u(r,e){if(!i[r]){if(!n[r]){var t="function"==typeof require&&require;if(!e&&t)return t(r,!0);if(s)return s(r,!0);throw(e=new Error("Cannot find module '"+r+"'")).code="MODULE_NOT_FOUND",e}t=i[r]={exports:{}},n[r][0].call(t.exports,function(e){return u(n[r][1][e]||e)},t,t.exports,o,n,i,a)}return i[r].exports}for(var s="function"==typeof require&&require,e=0;e<a.length;e++)u(a[e]);return u}({1:[function(e,r,t){var a=e("@turf/invariant").getCoord,u=e("@turf/helpers").radiansToDistance;r.exports=function(e,r,t){var o=Math.PI/180,e=a(e),r=a(r),n=o*(r[1]-e[1]),i=o*(r[0]-e[0]),e=o*e[1],o=o*r[1],r=Math.pow(Math.sin(n/2),2)+Math.pow(Math.sin(i/2),2)*Math.cos(e)*Math.cos(o);return u(2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),t)}},{"@turf/helpers":2,"@turf/invariant":3}],2:[function(e,r,t){function u(e,r,t,o){if(void 0===e)throw new Error("geometry is required");if(r&&r.constructor!==Object)throw new Error("properties must be an Object");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");if(o&&-1===["string","number"].indexOf(typeof o))throw new Error("id must be a number or a string");var n={type:"Feature"};return o&&(n.id=o),t&&(n.bbox=t),n.properties=r||{},n.geometry=e,n}function n(e,r,t,o){if(!e)throw new Error("No coordinates passed");if(void 0===e.length)throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(h(e[0])&&h(e[1]))return u({type:"Point",coordinates:e},r,t,o);throw new Error("Coordinates must contain numbers")}function i(e,r,t,o){if(!e)throw new Error("No coordinates passed");for(var n=0;n<e.length;n++){var i=e[n];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var a=0;a<i[i.length-1].length;a++){if(0===n&&0===a&&!h(i[0][0])||!h(i[0][1]))throw new Error("Coordinates must contain numbers");if(i[i.length-1][a]!==i[0][a])throw new Error("First and last Position are not equivalent.")}}return u({type:"Polygon",coordinates:e},r,t,o)}function a(e,r,t,o){if(!e)throw new Error("No coordinates passed");if(e.length<2)throw new Error("Coordinates must be an array of two or more positions");if(h(e[0][1])&&h(e[0][1]))return u({type:"LineString",coordinates:e},r,t,o);throw new Error("Coordinates must contain numbers")}function s(e,r,t,o){if(e)return u({type:"MultiLineString",coordinates:e},r,t,o);throw new Error("No coordinates passed")}function f(e,r,t,o){if(e)return u({type:"MultiPoint",coordinates:e},r,t,o);throw new Error("No coordinates passed")}function c(e,r,t,o){if(e)return u({type:"MultiPolygon",coordinates:e},r,t,o);throw new Error("No coordinates passed")}var o={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,centimeters:6373e5,centimetres:6373e5,kilometers:6373,kilometres:6373,feet:20908792.65},l={kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,centimetres:1e4,millimeter:1e6,acres:247105e-9,miles:386e-9,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function d(e,r){if(null==e)throw new Error("radians is required");r=o[r||"kilometers"];if(r)return e*r;throw new Error("units is invalid")}function w(e,r){if(null==e)throw new Error("distance is required");r=o[r||"kilometers"];if(r)return e/r;throw new Error("units is invalid")}function g(e){if(null==e)throw new Error("radians is required");return 180*(e%(2*Math.PI))/Math.PI}function h(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}r.exports={feature:u,geometry:function(e,r,t){if(!e)throw new Error("type is required");if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");var o;switch(e){case"Point":o=n(r).geometry;break;case"LineString":o=a(r).geometry;break;case"Polygon":o=i(r).geometry;break;case"MultiPoint":o=f(r).geometry;break;case"MultiLineString":o=s(r).geometry;break;case"MultiPolygon":o=c(r).geometry;break;default:throw new Error(e+" is invalid")}return t&&(o.bbox=t),o},featureCollection:function(e,r,t){if(!e)throw new Error("No features passed");if(!Array.isArray(e))throw new Error("features must be an Array");if(r&&4!==r.length)throw new Error("bbox must be an Array of 4 numbers");if(t&&-1===["string","number"].indexOf(typeof t))throw new Error("id must be a number or a string");var o={type:"FeatureCollection"};return t&&(o.id=t),r&&(o.bbox=r),o.features=e,o},geometryCollection:function(e,r,t,o){if(!e)throw new Error("geometries is required");if(Array.isArray(e))return u({type:"GeometryCollection",geometries:e},r,t,o);throw new Error("geometries must be an Array")},point:n,multiPoint:f,lineString:a,multiLineString:s,polygon:i,multiPolygon:c,radiansToDistance:d,distanceToRadians:w,distanceToDegrees:function(e,r){return g(w(e,r))},radians2degrees:g,degrees2radians:function(e){if(null==e)throw new Error("degrees is required");return e%360*Math.PI/180},bearingToAngle:function(e){if(null==e)throw new Error("bearing is required");return(e%=360)<0&&(e+=360),e},convertDistance:function(e,r,t){if(null==e)throw new Error("distance is required");if(0<=e)return d(w(e,r),t||"kilometers");throw new Error("distance must be a positive number")},convertArea:function(e,r,t){if(null==e)throw new Error("area is required");if(!(0<=e))throw new Error("area must be a positive number");if(!(r=l[r||"meters"]))throw new Error("invalid original units");if(t=l[t||"kilometers"])return e/r*t;throw new Error("invalid final units")},round:function(e,r){if(null==e||isNaN(e))throw new Error("num is required");if(!r||0<=r)return r=Math.pow(10,r||0),Math.round(e*r)/r;throw new Error("precision must be a positive number")},isNumber:h}},{}],3:[function(e,r,t){function o(e){if(!e)throw new Error("obj is required");var r;if(e.length?r=e:e.coordinates?r=e.coordinates:e.geometry&&e.geometry.coordinates&&(r=e.geometry.coordinates),r)return n(r),r;throw new Error("No valid coordinates")}function n(e){if(1<e.length&&"number"==typeof e[0]&&"number"==typeof e[1])return!0;if(Array.isArray(e[0])&&e[0].length)return n(e[0]);throw new Error("coordinates must only contain numbers")}function i(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}r.exports={geojsonType:function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)},collectionOf:function(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}},featureOf:function(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)},getCoord:function(e){if(!e)throw new Error("obj is required");if(1<(e=o(e)).length&&"number"==typeof e[0]&&"number"==typeof e[1])return e;throw new Error("Coordinate is not a valid Point")},getCoords:o,containsNumber:n,getGeom:i,getGeomType:function(e){if(!e)throw new Error("geojson is required");if(e=i(e))return e.type}}},{}],4:[function(e,r,t){"use strict";function v(e,r,t){if(null!==e)for(var o,n,i,a,u,s,f,c=0,l=e.type,d="FeatureCollection"===l,w="Feature"===l,g=d?e.features.length:1,h=0;h<g;h++)for(u=(f=!!(s=d?e.features[h].geometry:w?e.geometry:e)&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<u;o++){var m=0,y=f?s.geometries[o]:s;if(null!==y){var p=y.coordinates,E=y.type,b=!t||"Polygon"!==E&&"MultiPolygon"!==E?0:1;switch(E){case null:break;case"Point":r(p,c,h,m),c++,m++;break;case"LineString":case"MultiPoint":for(n=0;n<p.length;n++)r(p[n],c,h,m),c++,"MultiPoint"===E&&m++;"LineString"===E&&m++;break;case"Polygon":case"MultiLineString":for(n=0;n<p.length;n++){for(i=0;i<p[n].length-b;i++)r(p[n][i],c,h,m),c++;"MultiLineString"===E&&m++}"Polygon"===E&&m++;break;case"MultiPolygon":for(n=0;n<p.length;n++){for(i=0;i<p[n].length;i++)for(a=0;a<p[n][i].length-b;a++)r(p[n][i][a],c,h,m),c++;m++}break;case"GeometryCollection":for(n=0;n<y.geometries.length;n++)v(y.geometries[n],r,t);break;default:throw new Error("Unknown Geometry Type")}}}}function u(e,n,i,r){var a=i;return v(e,function(e,r,t,o){a=0===r&&void 0===i?e:n(a,e,r,t,o)},r),a}function i(e,r){var t;switch(e.type){case"FeatureCollection":for(t=0;t<e.features.length;t++)r(e.features[t].properties,t);break;case"Feature":r(e.properties,0)}}function a(e,r){if("Feature"===e.type)r(e,0);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length;t++)r(e.features[t],t)}function s(e,r){for(var t,o,n,i,a,u,s,f=0,c="FeatureCollection"===e.type,l="Feature"===e.type,d=c?e.features.length:1,w=0;w<d;w++){for(a=c?e.features[w].geometry:l?e.geometry:e,s=c?e.features[w].properties:l?e.properties:{},i=(u=!!a&&"GeometryCollection"===a.type)?a.geometries.length:1,o=0;o<i;o++)if(null===(n=u?a.geometries[o]:a))r(null,f,s);else switch(n.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":r(n,f,s);break;case"GeometryCollection":for(t=0;t<n.geometries.length;t++)r(n.geometries[t],f,s);break;default:throw new Error("Unknown Geometry Type")}f++}}function f(e,i){s(e,function(e,t,o){var n,r=null===e?null:e.type;switch(r){case null:case"Point":case"LineString":case"Polygon":return void i(c(e,o),t,0)}switch(r){case"MultiPoint":n="Point";break;case"MultiLineString":n="LineString";break;case"MultiPolygon":n="Polygon"}e.coordinates.forEach(function(e,r){i(c({type:n,coordinates:e},o),t,r)})})}function o(e,a){f(e,function(t,o,n){var e,i=0;t.geometry&&"Point"!==(e=t.geometry.type)&&"MultiPoint"!==e&&u(t,function(e,r){e=l([e,r],t.properties);return a(e,o,n,i),i++,r})})}function c(e,r){if(void 0===e)throw new Error("No geometry passed");return{type:"Feature",properties:r||{},geometry:e}}function l(e,r){if(!e)throw new Error("No coordinates passed");if(e.length<2)throw new Error("Coordinates must be an array of two or more positions");return{type:"Feature",properties:r||{},geometry:{type:"LineString",coordinates:e}}}function d(e,r){if(!e)throw new Error("geojson is required");var t=(e.geometry||e).type;if(!t)throw new Error("invalid geojson");if("FeatureCollection"===t)throw new Error("FeatureCollection is not supported");if("GeometryCollection"===t)throw new Error("GeometryCollection is not supported");var o=(e.geometry||e).coordinates;if(!o)throw new Error("geojson must contain coordinates");switch(t){case"LineString":return void r(o,0,0);case"Polygon":case"MultiLineString":for(var n=0,i=0;i<o.length;i++)"MultiLineString"===t&&(n=i),r(o[i],i,n);return;case"MultiPolygon":for(var a=0;a<o.length;a++)for(var u=0;u<o[a].length;u++)r(o[a][u],u,a);return;default:throw new Error(t+" geometry not supported")}}Object.defineProperty(t,"__esModule",{value:!0}),t.coordEach=v,t.coordReduce=u,t.propEach=i,t.propReduce=function(e,t,o){var n=o;return i(e,function(e,r){n=0===r&&void 0===o?e:t(n,e,r)}),n},t.featureEach=a,t.featureReduce=function(e,t,o){var n=o;return a(e,function(e,r){n=0===r&&void 0===o?e:t(n,e,r)}),n},t.coordAll=function(e){var r=[];return v(e,function(e){r.push(e)}),r},t.geomEach=s,t.geomReduce=function(e,o,n){var i=n;return s(e,function(e,r,t){i=0===r&&void 0===n?e:o(i,e,r,t)}),i},t.flattenEach=f,t.flattenReduce=function(e,o,n){var i=n;return f(e,function(e,r,t){i=0===r&&0===t&&void 0===n?e:o(i,e,r,t)}),i},t.segmentEach=o,t.segmentReduce=function(e,n,i){var a=i,u=!1;return o(e,function(e,r,t,o){a=!1===u&&void 0===i?e:n(a,e,r,t,o),u=!0}),a},t.feature=c,t.lineString=l,t.lineEach=d,t.lineReduce=function(e,o,n){var i=n;return d(e,function(e,r,t){i=0===r&&void 0===n?e:o(i,e,r,t)}),i}},{}],"@turf/line-distance":[function(e,r,t){var o=e("@turf/distance"),n=e("@turf/meta").segmentReduce;r.exports=function(e,t){if(e)return n(e,function(e,r){r=r.geometry.coordinates;return e+o(r[0],r[1],t)},0);throw new Error("geojson is required")}},{"@turf/distance":1,"@turf/meta":4}]},{},[])("@turf/line-distance")});

// @turf/line-distance 4.7.3
var turfLineDistance = module.exports;
