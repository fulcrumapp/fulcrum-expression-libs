!function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).turfdistance=e()}(function(){return function o(n,i,a){function u(r,e){if(!i[r]){if(!n[r]){var t="function"==typeof require&&require;if(!e&&t)return t(r,!0);if(s)return s(r,!0);throw(t=new Error("Cannot find module '"+r+"'")).code="MODULE_NOT_FOUND",t}t=i[r]={exports:{}},n[r][0].call(t.exports,function(e){return u(n[r][1][e]||e)},t,t.exports,o,n,i,a)}return i[r].exports}for(var s="function"==typeof require&&require,e=0;e<a.length;e++)u(a[e]);return u}({1:[function(e,r,t){function i(e,r){return{type:"Feature",properties:r||{},geometry:e}}r.exports.feature=i,r.exports.point=function(e,r){if(!Array.isArray(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return i({type:"Point",coordinates:e.slice()},r)},r.exports.polygon=function(e,r){if(!e)throw new Error("No coordinates passed");for(var t=0;t<e.length;t++){var o=e[t];if(o.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var n=0;n<o[o.length-1].length;n++)if(o[o.length-1][n]!==o[0][n])throw new Error("First and last Position are not equivalent.")}return i({type:"Polygon",coordinates:e},r)},r.exports.lineString=function(e,r){if(!e)throw new Error("No coordinates passed");return i({type:"LineString",coordinates:e},r)},r.exports.featureCollection=function(e){return{type:"FeatureCollection",features:e}},r.exports.multiLineString=function(e,r){if(!e)throw new Error("No coordinates passed");return i({type:"MultiLineString",coordinates:e},r)},r.exports.multiPoint=function(e,r){if(!e)throw new Error("No coordinates passed");return i({type:"MultiPoint",coordinates:e},r)},r.exports.multiPolygon=function(e,r){if(!e)throw new Error("No coordinates passed");return i({type:"MultiPolygon",coordinates:e},r)},r.exports.geometryCollection=function(e,r){return i({type:"GeometryCollection",geometries:e},r)};var o={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373};r.exports.radiansToDistance=function(e,r){r=o[r||"kilometers"];if(void 0===r)throw new Error("Invalid unit");return e*r},r.exports.distanceToRadians=function(e,r){r=o[r||"kilometers"];if(void 0===r)throw new Error("Invalid unit");return e/r},r.exports.distanceToDegrees=function(e,r){r=o[r||"kilometers"];if(void 0===r)throw new Error("Invalid unit");return e/r*57.2958}},{}],2:[function(e,r,t){r.exports.geojsonType=function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)},r.exports.collectionOf=function(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}},r.exports.featureOf=function(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)},r.exports.getCoord=function(e){if(Array.isArray(e)&&"number"==typeof e[0]&&"number"==typeof e[1])return e;if(e){if("Feature"===e.type&&e.geometry&&"Point"===e.geometry.type&&Array.isArray(e.geometry.coordinates))return e.geometry.coordinates;if("Point"===e.type&&Array.isArray(e.coordinates))return e.coordinates}throw new Error("A coordinate, feature, or point geometry is required")}},{}],"turf-distance":[function(e,r,t){var a=e("turf-invariant").getCoord,u=e("turf-helpers").radiansToDistance;r.exports=function(e,r,t){var o=Math.PI/180,n=a(e),i=a(r),e=o*(i[1]-n[1]),r=o*(i[0]-n[0]),n=o*n[1],i=o*i[1],i=Math.pow(Math.sin(e/2),2)+Math.pow(Math.sin(r/2),2)*Math.cos(n)*Math.cos(i);return u(2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)),t)}},{"turf-helpers":1,"turf-invariant":2}]},{},[])("turf-distance")});

var turfdistance = module.exports;
